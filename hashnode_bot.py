import os
import sys
import requests
from datetime import datetime
import json # Assurons-nous que json est import√©

# --- R√©cup√©ration et v√©rification des cl√©s d'API ---
HUGGINGFACE_API_KEY = os.getenv("HUGGINGFACE_API_KEY")
HASHNODE_API_KEY = os.getenv("HASHNODE_API_KEY")

if not HUGGINGFACE_API_KEY:
    print("‚ùå ERREUR : HUGGINGFACE_API_KEY n'est pas d√©fini. Assurez-vous que la variable d'environnement est correctement pass√©e.")
    sys.exit(1)

if not HASHNODE_API_KEY:
    print("‚ùå ERREUR : HASHNODE_API_KEY n'est pas d√©fini. Assurez-vous que la variable d'environnement est correctement pass√©e.")
    sys.exit(1)

# --- D√©finit le mod√®le HF √† utiliser et l'URL de l'API ---
HF_MODEL_NAME = "HuggingFaceH4/zephyr-7b-beta"
# L'URL exacte pour l'API de chat completions pour ce mod√®le, comme fourni par Hugging Face
HF_API_INFERENCE_URL = "https://router.huggingface.co/hf-inference/models/HuggingFaceH4/zephyr-7b-beta/v1/chat/completions"


# --- Test d'authentification Hugging Face ---
def test_hf_auth():
    headers = {"Authorization": f"Bearer {HUGGINGFACE_API_KEY}"}
    # Requ√™te de test au format chat completions
    payload = {
        "messages": [
            {
                "role": "user",
                "content": "Bonjour."
            }
        ],
        "model": HF_MODEL_NAME # Important de sp√©cifier le mod√®le m√™me dans le payload
    }

    print(f"üîé Test d'authentification HF avec mod√®le '{HF_MODEL_NAME}' √† l'URL: {HF_API_INFERENCE_URL}")
    try:
        resp = requests.post(HF_API_INFERENCE_URL, headers=headers, json=payload, timeout=60)
        print(f"Auth test HF status: {resp.status_code}")
        print(f"Auth test HF response: {resp.text}")

        # Les codes 200 (OK) ou 503 (Service Indisponible - chargement du mod√®le) sont acceptables
        if resp.status_code == 200 or resp.status_code == 503:
            print("‚úÖ Authentification Hugging Face r√©ussie et mod√®le accessible (ou en cours de chargement).")
            # Un test suppl√©mentaire : v√©rifier que la r√©ponse est un JSON valide
            try:
                response_data = resp.json()
                if "choices" in response_data and response_data["choices"]:
                    print("‚úÖ R√©ponse du mod√®le au format attendu (contient 'choices').")
                else:
                    print("‚ö†Ô∏è R√©ponse du mod√®le valide mais ne contient pas 'choices' dans le format attendu.")
            except json.JSONDecodeError:
                print("‚ö†Ô∏è R√©ponse du mod√®le non JSON valide. Cela pourrait √™tre un probl√®me de serveur.")
        elif resp.status_code == 401:
            print("‚ùå √âchec de l‚Äôauthentification HF: 401 Unauthorized. Cl√© API incorrecte ou permissions insuffisantes.")
            sys.exit(1)
        elif resp.status_code == 404:
            print(f"‚ùå √âchec de l‚Äôauthentification HF: 404 Not Found. Le mod√®le '{HF_MODEL_NAME}' n'est pas d√©ploy√© publiquement ou l'URL est incorrecte.")
            print("V√©rifiez la disponibilit√© de ce mod√®le sur l'API d'inf√©rence gratuite ou si un plan payant est n√©cessaire.")
            sys.exit(1)
        else:
            print(f"‚ùå √âchec de l‚Äôauthentification HF. Statut inattendu: {resp.status_code}, R√©ponse: {resp.text}")
            sys.exit(1)
    except requests.exceptions.RequestException as e:
        print(f"‚ùå ERREUR r√©seau ou connexion lors du test d'authentification HF : {e}")
        sys.exit(1)

test_hf_auth()

# --- G√©n√©ration de l'article via HuggingFace Inference API ---
def generate_article():
    # Le prompt pour l'article de blog
    article_prompt = (
        "R√©dige un article de blog (~500 mots) en fran√ßais sur une tendance actuelle "
        "en intelligence artificielle, avec un titre accrocheur et une conclusion."
    )
    
    # Payload au format chat completions
    payload = {
        "messages": [
            {
                "role": "user",
                "content": article_prompt
            }
        ],
        "model": HF_MODEL_NAME, # Important de sp√©cifier le mod√®le ici
        "parameters": {
            "max_new_tokens": 500,
            "temperature": 0.7
            # "return_full_text": False n'est g√©n√©ralement pas n√©cessaire pour l'API chat completions
            # car elle s√©pare naturellement le prompt de la r√©ponse.
        }
    }

    headers = {
        "Authorization": f"Bearer {HUGGINGFACE_API_KEY}",
        "Content-Type": "application/json"
    }

    print(f"\nüöÄ Tentative de g√©n√©ration d'article avec le mod√®le '{HF_MODEL_NAME}'...")
    try:
        response = requests.post(
            HF_API_INFERENCE_URL, # Utilise l'URL sp√©cifique pour chat completions
            headers=headers,
            json=payload,
            timeout=300 # Laisser un timeout g√©n√©reux
        )
        response.raise_for_status() # L√®ve une exception pour les codes d'erreur HTTP

        print("Status code HF:", response.status_code)
        print("Response HF:", response.text)

        data = response.json()
        
        # Extraction du texte g√©n√©r√© selon le format de r√©ponse de l'API chat completions
        if 'choices' in data and data['choices'] and 'message' in data['choices'][0] and 'content' in data['choices'][0]['message']:
            article_content = data['choices'][0]['message']['content'].strip()
            print("DEBUG: R√©ponse trait√©e comme Chat Completions API.")
        else:
            raise ValueError(f"La r√©ponse HF ne contient pas le format de chat completions attendu. R√©ponse compl√®te: {data}")
        
        return article_content
    except requests.exceptions.RequestException as e:
        print(f"‚ùå ERREUR HTTP lors de la g√©n√©ration de l'article : {e}")
        sys.exit(1)
    except ValueError as e:
        print(f"‚ùå ERREUR de donn√©es dans la r√©ponse HF : {e}")
        sys.exit(1)

# --- R√©cup√©ration de l'ID de la publication Hashnode ---
HASHNODE_API_URL = "https://gql.hashnode.com/"

def get_publication_id():
    query = """
    query {
      me {
        publication {
          _id
        }
      }
    }
    """
    headers = {
        "Content-Type": "application/json",
        "Authorization": HASHNODE_API_KEY
    }
    print("\nüîé R√©cup√©ration de l'ID de publication Hashnode...")
    try:
        resp = requests.post(HASHNODE_API_URL, json={"query": query}, headers=headers)
        resp.raise_for_status()
        data = resp.json()
        publication_id = data['data']['me']['publication']['_id']
        print(f"‚úÖ ID de publication Hashnode r√©cup√©r√© : {publication_id}")
        return publication_id
    except requests.exceptions.RequestException as e:
        print(f"‚ùå ERREUR HTTP lors de la r√©cup√©ration de l'ID de publication Hashnode : {e}")
        sys.exit(1)
    except KeyError as e:
        print(f"‚ùå ERREUR : Impossible de trouver l'ID de publication dans la r√©ponse Hashnode. V√©rifiez votre cl√© ou les permissions. D√©tails: {e}, R√©ponse: {resp.text}")
        sys.exit(1)


# --- Publication de l'article sur Hashnode ---
def publish_article(content):
    publication_id = get_publication_id()
    title = "Article IA - " + datetime.now().strftime("%d %B %Y - %H:%M") # Ajout de l'heure pour l'unicit√©

    mutation = """
    mutation CreateStory($input: CreateStoryInput!) {
      createStory(input: $input) {
        post { title slug }
      }
    }
    """
    variables = {
        "input": {
            "title": title,
            "contentMarkdown": content,
            "publicationId": publication_id,
            "isRepublished": False,
            "tags": [{"_id": "64d3ac20b4110f0001e6aa5b", "name": "Artificial Intelligence"}],
            "coverImageOptions": {"enabled": False},
        }
    }

    headers = {
        "Content-Type": "application/json",
        "Authorization": HASHNODE_API_KEY
    }

    print(f"\n‚úçÔ∏è Tentative de publication de l'article '{title}' sur Hashnode...")
    try:
        resp = requests.post(HASHNODE_API_URL, json={"query": mutation, "variables": variables}, headers=headers)
        resp.raise_for_status()
        print("Publish status:", resp.status_code)
        print("Publish response:", resp.text)
        print(f"‚úÖ Article publi√© avec succ√®s : {title}")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå ERREUR HTTP lors de la publication de l'article sur Hashnode : {e}")
        print(f"R√©ponse Hashnode en cas d'erreur : {resp.text if 'resp' in locals() else 'Pas de r√©ponse.'}")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Une erreur inattendue est survenue lors de la publication : {e}")
        sys.exit(1)

# --- Ex√©cution principale ---
if __name__ == "__main__":
    print("D√©marrage du bot Hashnode.")
    try:
        article = generate_article()
        publish_article(article)
        print("\nüéâ Bot Hashnode termin√© avec succ√®s !")
    except Exception as e:
        print(f"\nFATAL ERROR: Une erreur critique est survenue : {e}")
        sys.exit(1)