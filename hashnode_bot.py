import os
import sys
import requests
from datetime import datetime

# --- R√©cup√©ration et v√©rification des cl√©s d'API ---
# CORRECTION ICI : os.getenv() doit prendre le NOM de la variable d'environnement
HUGGINGFACE_API_KEY = os.getenv("HUGGINGFACE_API_KEY")
HASHNODE_API_KEY = os.getenv("HASHNODE_API_KEY") # J'ai aussi corrig√© un espace √©trange ici

if not HUGGINGFACE_API_KEY:
    print("‚ùå ERREUR : HUGGINGFACE_API_KEY n'est pas d√©fini. Assurez-vous que la variable d'environnement est correctement pass√©e.")
    sys.exit(1)

if not HASHNODE_API_KEY:
    print("‚ùå ERREUR : HASHNODE_API_KEY n'est pas d√©fini. Assurez-vous que la variable d'environnement est correctement pass√©e.")
    sys.exit(1)

# --- Test d'authentification Hugging Face ---
def test_hf_auth():
    # Ici, la cl√© est utilis√©e directement √† partir de la variable globale, c'est correct
    resp = requests.get(
        "https://api-inference.huggingface.co/models/bigscience/bloomz",
        headers={"Authorization": f"Bearer {HUGGINGFACE_API_KEY}"}
    )
    print("üîé Auth test HF status:", resp.status_code)
    # 503 est un code attendu pour les mod√®les qui se chargent (cold start)
    if resp.status_code not in (200, 503):
        print(f"‚ùå √âchec de l‚Äôauthentification HF. Statut: {resp.status_code}, R√©ponse: {resp.text}")
        sys.exit(1)
    else:
        print("‚úÖ Authentification Hugging Face r√©ussie ou mod√®le en chargement.")

test_hf_auth()

# --- G√©n√©ration de l'article via HuggingFace Inference API ---
def generate_article():
    prompt = (
        "R√©dige un article de blog (~500 mots) en fran√ßais sur une tendance actuelle "
        "en intelligence artificielle, avec un titre accrocheur et une conclusion."
    )
    headers = {
        "Authorization": f"Bearer {HUGGINGFACE_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "inputs": prompt,
        "options": {"wait_for_model": True},
        "parameters": {
            "max_new_tokens": 500,
            "temperature": 0.7
        }
    }

    print("\nüöÄ Tentative de g√©n√©ration d'article avec le mod√®le Bloomz...")
    try:
        response = requests.post(
            "https://api-inference.huggingface.co/models/bigscience/bloomz",
            headers=headers,
            json=payload,
            timeout=300 # Augmenter le timeout pour Bloomz, car il peut √™tre lent √† charger
        )
        response.raise_for_status() # L√®ve une exception pour les codes d'erreur HTTP

        print("Status code HF:", response.status_code)
        print("Response HF:", response.text)

        data = response.json()
        if not isinstance(data, list) or not data or "generated_text" not in data[0]:
            raise ValueError(f"La r√©ponse HF ne contient pas 'generated_text'. R√©ponse compl√®te: {data}")
        return data[0]["generated_text"]
    except requests.exceptions.RequestException as e:
        print(f"‚ùå ERREUR HTTP lors de la g√©n√©ration de l'article : {e}")
        sys.exit(1)
    except ValueError as e:
        print(f"‚ùå ERREUR de donn√©es dans la r√©ponse HF : {e}")
        sys.exit(1)

# --- R√©cup√©ration de l'ID de la publication Hashnode ---
HASHNODE_API_URL = "https://gql.hashnode.com/"

def get_publication_id():
    query = """
    query {
      me {
        publication {
          _id
        }
      }
    }
    """
    headers = {
        "Content-Type": "application/json",
        "Authorization": HASHNODE_API_KEY # C'est correct d'utiliser la variable ici
    }
    print("\nüîé R√©cup√©ration de l'ID de publication Hashnode...")
    try:
        resp = requests.post(HASHNODE_API_URL, json={"query": query}, headers=headers)
        resp.raise_for_status()
        data = resp.json()
        publication_id = data['data']['me']['publication']['_id']
        print(f"‚úÖ ID de publication Hashnode r√©cup√©r√© : {publication_id}")
        return publication_id
    except requests.exceptions.RequestException as e:
        print(f"‚ùå ERREUR HTTP lors de la r√©cup√©ration de l'ID de publication Hashnode : {e}")
        sys.exit(1)
    except KeyError as e:
        print(f"‚ùå ERREUR : Impossible de trouver l'ID de publication dans la r√©ponse Hashnode. V√©rifiez votre cl√© ou les permissions. D√©tails: {e}, R√©ponse: {resp.text}")
        sys.exit(1)


# --- Publication de l'article sur Hashnode ---
def publish_article(content):
    publication_id = get_publication_id()
    title = "Article IA - " + datetime.now().strftime("%d %B %Y - %H:%M") # Ajout de l'heure pour l'unicit√©

    mutation = """
    mutation CreateStory($input: CreateStoryInput!) {
      createStory(input: $input) {
        post { title slug }
      }
    }
    """
    variables = {
        "input": {
            "title": title,
            "contentMarkdown": content,
            "publicationId": publication_id,
            "isRepublished": False,
            "tags": [{"_id": "64d3ac20b4110f0001e6aa5b", "name": "Artificial Intelligence"}],
            "coverImageOptions": {"enabled": False},
        }
    }

    headers = {
        "Content-Type": "application/json",
        "Authorization": HASHNODE_API_KEY
    }

    print(f"\n‚úçÔ∏è Tentative de publication de l'article '{title}' sur Hashnode...")
    try:
        resp = requests.post(HASHNODE_API_URL, json={"query": mutation, "variables": variables}, headers=headers)
        resp.raise_for_status() # L√®ve une exception pour les codes d'erreur HTTP
        print("Publish status:", resp.status_code)
        print("Publish response:", resp.text)
        print(f"‚úÖ Article publi√© avec succ√®s : {title}")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå ERREUR HTTP lors de la publication de l'article sur Hashnode : {e}")
        print(f"R√©ponse Hashnode en cas d'erreur : {resp.text if 'resp' in locals() else 'Pas de r√©ponse.'}")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Une erreur inattendue est survenue lors de la publication : {e}")
        sys.exit(1)

# --- Ex√©cution principale ---
if __name__ == "__main__":
    print("D√©marrage du bot Hashnode.")
    try:
        article = generate_article()
        publish_article(article)
        print("\nüéâ Bot Hashnode termin√© avec succ√®s !")
    except Exception as e:
        print(f"\nFATAL ERROR: Une erreur critique est survenue : {e}")
        sys.exit(1)